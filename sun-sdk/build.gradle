group 'Tron'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "jacoco"

def grpcVersion = '1.60.0'

sourceCompatibility = 1.8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava.options*.compilerArgs = [
        "-Xlint:serial", "-Xlint:varargs", "-Xlint:classfile", "-Xlint:dep-ann",
        "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
        "-Xlint:path", "-Xlint:static", "-Xlint:try", "-Xlint:fallthrough",
        "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options"
]

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/protos'
        }
        java {
            srcDir 'src/main/gen'
            srcDir 'src/main/java'
        }
    }

}
buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
        }
        mavenCentral()
    }
    ext {
        projectVersion = '1.3.0-RELEASE'
        grpcVersion = '1.6.1'
        protobufVersion = '3.3.0'
        protobufGradlePluginVersion = '0.8.0'
        springCloudConsulVersion = '1.2.1.RELEASE'
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.1'
        classpath "gradle.plugin.com.liferay:gradle-plugins-node:4.3.0"
    }
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '3.3'
//}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'com.beust', name: 'jcommander', version: '1.72'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
    implementation 'com.maxmind.geoip2:geoip2:4.2.1'
// https://mvnrepository.com/artifact/org.projectlombok/lombok
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.2'

    // google grpc
    implementation group: 'io.grpc', name: 'grpc-netty', version: grpcVersion
    implementation group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion
    implementation group: 'io.grpc', name: 'grpc-stub', version: grpcVersion
    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.119.Final'

    implementation group: 'com.googlecode.protobuf-java-format', name: 'protobuf-java-format', version: '1.4'
    implementation "com.madgag.spongycastle:core:1.53.0.0"
    implementation "com.madgag.spongycastle:prov:1.53.0.0"
    implementation group: 'com.typesafe', name: 'config', version: '1.3.2'
    implementation "com.google.code.findbugs:jsr305:3.0.0"
    implementation group: 'com.typesafe', name: 'config', version: '1.3.2'
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation "org.apache.commons:commons-lang3:3.4"
    implementation group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'
    implementation 'com.alibaba:fastjson:1.2.83'
    implementation 'com.google.code.gson:gson:2.12.1'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"

    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    outputSubDir = "gen"
                }
            }
        }
        all()*.plugins {
            grpc {
                outputSubDir = "gen"
            }
        }
    }
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}

shadowJar {
    mergeServiceFiles()
}
